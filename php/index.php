<?php // AULA DE VARI√ÅVEIS!!!
// Meus dados
$nome = "Felipe Bordin";
$idade = 15;
$altura = 1.71;

echo "Meu nome √© $nome, minha idade √© $idade e minha altura √© $altura <br>";

// Alterando meus dados
$nome = "Isabela Chaise";
$idade = 14;
$altura = 1.53;

echo "Meu nome √© $nome, minha idade √© $idade e minha altura √© $altura <br>";
echo "<hr>";


// Se eu quiser mostra a Hilux o c(em Carro na linha 22) dever√° ser min√∫sculo :)
$carro = "Hilux";
$Carro = "Fusca";

echo $Carro;

// Outro exemplo como o de cima ‚Üë
$meunome = "Felipe";
$meuNome = "Isabela"

echo $meuNome;



// Nomes v√°lidos (para vari√°vel)
// $nome
// $_meunome
// $carro10
// $nota1
// $meu_nome
// $meuNome

// Nomes inv√°lidos (para vari√°veis)
// $2121nome 
// $carro*&!@#
// $meu carro





//AULA DE VARI√ÅVEIS DIN√ÇMICAS
$bebida = "refrigerante";

$$bebida = "Guaran√°";

echo $refrigerante // A resposta do site vai ser Guaran√°!

// Outro exemplo como o de cima ‚Üë

$destino = "cidade";

$$destino = "Ilh√©us";

echo $cidade; // A resposta vai ser Ilh√©us





//TIPOS DE DADOS
/****** Escalares ******/

// string
$nome = "Ol√° mundo";
var_dump($nome); // O var_dump vai dar mais informa√ß√µes sobre a vari√°vel $nome por exemplo :)
if(is_string($nome)):
    echo "√â uma string"; // No caso a resposta certa √© essa, mas se por exemplo a vari√°vel fosse {$nome = 123;} a resposta correta iria ser n√£o √© uma string ‚úì
else:
    echo "N√£o √© uma string";
endif; 


// int
$idade = 27.5;
var_dump($idade); // O var_dump vai dar mais informa√ß√µes sobre a vari√°vel $idade por exemplo :)
if(is_int($idade)):
    echo "√â um inteiro";
else:
    echo "N√£o √© um inteiro"; // No caso a resposta certa √© essa, mas se por exemplo a vari√°vel fosse {$idade = 27;} a resposta correta seria √© um inteiro ‚úì
endif;


// float
$altura = 1.77;
var_dump($altura); // O var_dump vai dar mais informa√ß√µes sobre a vari√°vel $altura por exemplo :)
if(is_float($altura)):
    echo "√â um float"; // No caso a resposta certa √© essa, mas se por exemplo a vari√°vel fosse {$altura = 123;} a resposta correta iria ser n√£o √© um float ‚úì
else:
    echo "N√£o √© um float"; 
endif;


// boolean
$admin = false; // O valor da vari√°vel tamb√©m poderia ser true
var_dump($admin); // O var_dump vai dar mais informa√ß√µes sobre a vari√°vel $admin por exemplo :)
if(is_bool($admin)):
    echo "√â um boolean"; // No caso a resposta certa √© essa, mas se por exemplo a vari√°vel fosse {$admin = Rog√©rio70 ou (qualquer coisa diferente de true e false)} a resposta correta iria ser n√£o √© um boolean ‚úì
else:
    echo "N√£o √© um boolean";
endif;



/****** Compostos ******/

// array
$carros = array("Gol", "Uno", "Camaro", 12, 20.6, true); // √â uma vari√°vel que pode guardar mais de um valor, al√©m de aceitar todos os dados escalares 
var_dump($carros);
if(is_array)($carros):
    echo "√â um array"; // A resposta certa √© essa, por√©m se ouvesse apenas um valor a resposta seria n√£o √© um array ‚úì
else:
    echo "N√£o √© um array";
endif;


// object
class Cliente {
    public $nome;
    public function atribuirNome($nome) {
        $this -> $nome = $nome; // Se tu naum enendeu tamo na mesma 
    }
}

$cliente = new Cliente();
$cliente -> atribuirNome("Antonio"); // Acho que entendi (n√£o entendi n√£o)
var_dump($cliente);
if(is_object($cliente)):
    echo "√â um object"; // Sei que a resposta √© essa mas n√£o sei o motivo ‚úì
else:
    echo "N√£o √© um object";
endif;


/****** Especiais ******/
// NULL
$cidade = NULL; // √â usado quando a vari√°vel n√£o tem um valor 
var_dump($cidade);





//ASPAS SIMPLES, ASPAS DUPLAS E CONCATENA√á√ÉO


// Aspas simples
$nome = 'Rodrigo Oliveira'; // Tudo que estiver entre aspas simples vai ser considerado texto
echo 'Meu nome √© $nome'; // Nesse caso a resposta seria: Meu nome √© $nome. J√° que as aspas simples(''), s√£o literais e n√£o v√£o ser interpretadas 

// Para o echo de cima ‚Üë funcionar de maneira correta deve ser feito uma concatena√ß√£o
echo 'Meu nome √© '.$nome. ' e minha idade √© 23';


// Aspas duplas
$carro = "Gol";
echo "Meu carro √© $carro"; // J√° as aspas duplas s√£o interpretativas, se uma vari√°vel sor inscerida no meio dela a resposta sair√° da maneira correta





//ESCOPO DE VARI√ÅVEIS


$nome = "Felipe Bordin"; // Est√° variavel esta no escopo global e para executar uma function deve ser chamada dentro dessa fun√ß√£o 
$a = 1; // Essa vari√°vel vai ser usada na linha 197 do c√≥digo
$b = 3; // Essa vari√°vel vai ser usada na linha 197 do c√≥digo
$c = 7; // Essa vari√°vel vai ser usada na linha 197 do c√≥digo
// Escopo global ‚Üë
function exibeNome() {
    global $nome; // Essa √© a maneira de como chamar uma vari√°vel global dentro da function
    echo $nome;
}

exibeNome();


// Outro exemplo como o de cima ‚Üë

function exibeCidade() {
// Escopo local ‚Üì
    global $cidade;
    $cidade = "Rio de Janeiro"; // Esse vari√°vel est√° no escopo local e para acessar ela √© necessario definir ela como global
}

exibeCidade();


// Outra forma de acessar vari√°veis de escopo global üåç

function soma() {
    echo $GLOBALS['a'] + $GLOBALS['b'] + $GLOBALS['c']; // Essa √© outra forma de chamar vari√°vei de escopo global, usando a vari√°vel implementada no php ($GLOBALS)
}

soma(); 





//CONSTANTES 
define("NOME", "Jos√© Carlos"); // Esse valor n√£o pode alterar durante a execu√ß√£o do script 
echo NOME;





//ARRAYS
/****** Arrays Num√©ricos ******/
    // a maneira que o array organiza √© por n√∫meros, sendo feito desse jeito ‚Üì
             //   0       1       2
$carros = array("BMW", "Hilux", "Audi"); // Os arrays s√£o utilizados qunado voc√™ tem um grande n√∫mero de vari√°veis, e para n√£o perder muito tempo escrevendo tantas ele junta tudo em uma s√≥ passando valores de 0 a infinito
$carros[] = "Porche"; // Essa √© uma maneira de adicionar uma vari√°vel a um array 
print_r ($carros); // O print_r √© uma fun√ß√£o especifica para mostrar arrays (ela traz informa√ß√£o do nome e da posi√ß√£o da vari√°vel)
echo $carros[0]; // Para mostrar uma vari√°vel que est√° em um array √© nessecario passar o seu indice, por exemplo a BMW √© o indice 0 


// Count
echo count($carros); // Vai mostrar a quantidade de elementos que tem em um array


// Foreach
foreach($carros as $valor) { //Foreach quer dizer para cada, ent√£o todos os elementos do array carros vai ser atribuido a vari√°vel valor 
    echo $valor; // Nesse caso ele vai percorrer todo o elemento e retornar todos os carros (BMW, Hilux, Audi, Porche)

}


/****** Arrays Associativos ******/
$pessoa = array("nome" => "Felipe", "idade" => 15, "altura" => 1.70); // Ao invez de inteiros s√£o utilizadas strings em arrays associativos 
echo $pessoa["nome"];

foreach($pessoa as $indice => $valor) {
    echo $indice. ":" .$valor;
}


/****** Arrays Multidimensionais ******/
$times = array("Cariocas" => array("Vasco", "Flamengo", "Botafogo"), 
               "Paulistas" => array("S√£o Paulo", "Corinthians", "Santos"), 
               "Baianos" => array("Bahia", "Vit√≥ria", "Itabuna")); // √â um array dentro de um array, utilizado principalmente para separar informa√ß√µes distintas 
echo $times["Cariocas"][1]; // A resposta do site vai ser Flamengo (os parametros que est√£o entre [] servem como um filtro para achar exatamente o valor desejado dentro de um array)





//FUN√á√ïES DE ARRAY
/*
* is_array($array) = verificar se uma determinada vari√°vel √© um array
* in_array($valor, $array) = verificar se um determinado valor existe em alguma posi√ß√£o do array
* array_keys($array) = retorna um novo array com as chaves do array passado como par√¢metro
* array_values($array) = retorna um novo array com os valores do array passado como par√¢metro 
* array_marge($array1, $array2) = agrega o conte√∫do dos dois arrays 
* array_pop($array) = exclui a √∫ltima posi√ß√£o do array
* array_shift($array) = exclui a primeira posi√ß√£o do array
* array_unshift($arr, "valor") = adiciona um ou mais elementos no in√≠cio do array
* array_push($array, "valor", "valor") = adiciona um ou mais elelmentos no final do array
* array_combine($keys, $values) = mescla os dois arrays passados 
* array_sum() = calcula a soma dos elementos do array
* explode("/", "20/01/2001") = transforma string em array
* implode("-", $arr) = transforma array em string
*/





//CONDICIONAIS 
/*
* if (Tradu√ß√£o: se)
* else (Tradu√ß√£o: sen√£o)
* elseif (Tradu√ß√£o: sen√£o se)
*/

$numero = 7;

if ($numero == 10):
    echo "√â igual a 10";

elseif($numero <= 9):
    echo "√â menor ou igual a 9";

else: 
    echo "√â diferente de 10";

endif;


// Outro exemplo como o de cima ‚Üë
$media = 8;

echo ($media >= 7) ? "Aprovado!" : "Reprovado!";


// Switch e Case
$cor = "roxo";

switch ($cor):
    case "vermelho":
        echo "Sua cor preferida √© o vermelho.";
        break;
    case "roxo":
        echo "Sua cor preferida √© o roxo.";
        break;
    case "preto":
        echo "Sua cor preferida √© o preto.";
    default:
        echo "Sua cor preferida n√£o √© vermelho, roxo ou preto."
endswitch;





//OPERADORES ARITMETICOS

// S√£o usados com valores num√©ricos para executar opera√ß√µes aritim√©ticas comuns, como adi√ß√£o, subtra√ß√£o, multiplica√ß√£o etc.

/*
* Adi√ß√£o +
* Subtra√ß√£o -
* Multiplica√ß√£o * 
* Divis√£o /
* M√≥dulo %
* Exponencia√ß√£o ** 
*/

echo 10 + 10; // Resposta = 20 ‚úì
echo 25 - 5; // Resposta = 20 ‚úì
echo 5 * 4; // Resposta = 20 ‚úì
echo 40 / 2; // Resposta = 20 ‚úì
echo 120 % 10; // Resposta = 20 ‚úì
echo 3 ** 5; // Resposta = 243 ‚úì


// Operadores com vari√°vel
$a = 10;
$b = 20;
$c = 30;
$d = 5;
$e = 16;

$adicao = $a + $b;
echo $adicao; // Resposta = 30 ‚úì

$subtracao = $c - $a;
echo $subtracao; // Resposta = 20 ‚úì

$multiplicacao = $d * $a;
echo $multiplicacao;  // Resposta = 50 ‚úì

$divisao = $c / $a;
echo $divisao;  // Resposta = 3 ‚úì

$modulo = $e % $d;
echo $modulo;  // Resposta = 1 ‚úì

$exponenciacao = $a ** $d
echo $exponenciacao;  // Resposta = 100000 ‚úì






//OPERADORES DE INCREMENTO E DECREMENTO 


// Servem para somar ou subtrair em (+1 ou -1) qualquer valr do tipo num√©rico ou string

$valor = 20;

// Pr√©-incremento 
echo ++$valor; // Resposta = 21 ‚úì

// P√≥s-incremento
echo $valor++;  // Resposta = 20 e na pr√≥xima chamada 21 ‚úì


// Pr√©-decremento
echo --$valor;  // Resposta = 19 ‚úì

// P√≥s-decremento
echo $valor--;  // Resposta = 20 e na pr√≥xima 19 ‚úì






//OPERADORES L√ìGICOS


// Nos permitem fazer compara√ß√µes entre express√µes
// (&& - and querem dizer 'e')
// (|| - or querem dizer 'ou')
// (! quer dizer nega√ß√£o ou diferente)

$idade = 25;
$nome = "Felipe";

if ((idade == 25) and ($nome == "Felipe")):
    echo "√â verdadeiro";
else:
    echo "√â falso";
endif;





//WHILE E DO WHILE


$contador = 1;

// While

while ($contador <= 10): // While quer dizer enquanto 
    echo "Contador √© $contador";
    $contador++; 
endwhile;

// Do While

do { // O Do While faz a mesma coisa que o While mas ele primeiro faz e depois verifica 

    echo "Contador √© $contador";
    $contador++;
} while ($contador <= 10);






//FOR E FOREACH


// for

for ($contador = 0; $contador <= 10; $contador++): // For quer dizer 'para'
    echo "8 x $contador = ".($contador * 8); // Essa √© uma meneira de calcular a tabuada de algum algarismo 
endfor;


// foreanch

$cores = array("Verde", "Vermelho", "Azul");

foreach($cores as $valor): // Foreach quer dizer 'para cada'
    echo $valor
endforeach;





//FUN√á√ïES PARA STRINGS
/*
* strtoupper
* strtolower
* substr
* str_pad
* str_repeat
* strlen
* str_replace
* strpos
*/

$nome = "ISABELA";
$novoNome = strtolower; // Essa fun√ß√£o vai transformar todas as letras em minisculas
echo $novoNome;